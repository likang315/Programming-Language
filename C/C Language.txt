
1：取每个位的位数

#include <stdio.h>
void main(void)
{
	int	x;
	printf("输入一个四位数:");
	scanf("%d", &x);
	printf("千位=%d\n", x / 1000% 10);
	printf("百位=%d\n", x / 100 % 10);
	printf("十位=%d\n", x / 10  % 10);
	printf("个位=%d\n", x / 1   % 10);                        //从个位数开始依次取余除10（/10 % 10)

}


2：交换x,y的值(不建议使用)

#include <stdio.h>
int main(void)
{
	int x,y;
	scanf("%d%d",&x,&y);	
	x = x + y;
	y = x - y;
	x = x - y;

	printf("%d%d", x, y);
	
} 

3：水仙花数是指一个n位数（n>=3），它的每个位上的数字的n次幂之和等于它本身，三位数的有（153,370,371.407）


#include<stdio.h> 
int main() 
{ 
 int i,a,b,c; 
 for(i=100;i<1000;i++) 
 { 
	 a=i/100; 
     b=(i/10)%10; 
     c=i%10; 
  if((a*a*a+b*b*b+c*c*c)==i) 
	printf("%d\n",i); 
 } 
  return(0); 
} 



4:字符串字符1234转化为数字1234

#include <stdio.h>
int main(void)
{
	char s[5] = {"1234"};
	int i,y=0;
	for (i = 0; i < 4; i++)
	{
		y = y * 10 + s[i] - 48;
		printf("%d\n", y);
	}
} 


5：字符串把所有的大写字符移到后面并且只输出非大写字符

#include<stdio.h>
#include <string.h>

int main()
{
	char s[81];
	printf("Please input data:");
	gets(s);
	int p, i = 0;
	int j;
	p = strlen(s);
	j = p - 1;
	while (i<j) {
		while (i<p && (!(s[i]<'Z'&&s[i]>'A')))i++;
		while ((j>-1) && (s[j]>'A'&&s[j]<'Z'))j--;
		if (i<j)
		{
			char t;
			t = s[i];
			s[i] = s[j];
			s[j] = t;
		}
	}
	s[j + 1] = 0;
	puts(s);
}


   

6：字符串的遍历  
#include <stdio.h>
int main(void)
{
	int i = 0;
	char a='a';                                                 //判断\0是否为真
	char s[9];
	printf("Please input data:");
	gets(s);
	while (s[i]!='\0')
		{
			s[i] = a;
			puts(s);
			i++;


		}
		return 0;
	}  



#include <stdio.h>
int main(void)
{
	int l, i = 0;
	char a='a';                                              //测量字符串的有效字符个数
	char s[9];
	printf("Please input data:");
	gets(s);
	l = strlen(s);
	for (i; i < l; i++)
		s[i] = a;
		puts(s);

		return 0;
	}  


7：字符串复制strcpy

#include <stdio.h>
int main(void)
{
	char s1[9] = "china";
	char s2[8] = "america ";
	int i=0, j=0;
	while (s2[j++] = s1[i++]);               //空循环
		puts(s2);
	}  


8：malloc的分配和释放

#include <stdio.h>
int main(void)
{
	int * p;
	p = (int * )malloc(sizeof(int));
	if (!p) {
		printf("faiure");
		return 0;
	}
	*p = 5;
	printf("%d", *p);
	free(p);
} 

9：函数形参传值和传地址

#include <stdio.h>
int exchange(int * p1, int * p2)
{
	int t;
	t = *p1;
	*p1 = *p2;
	*p2 = t;
}
int main(void)
{
	int x, y;
	scanf("%d%d", &x,&y);
	exchange(&x, &y);                       //传地址（形参释放，但是值改变）
	printf("%d%d\n",x,y );


} 


10:结构体中存入数据并输出每一课的平均值

#include <stdio.h>
#include<string.h>
#define  N 3
struct stu 
{
	int num;
	char name;
	int chi;                                   //定义结构体类型
	int Eng;
	int math;
};
void sumscore(struct stu s[], double *pc, double * pe, double *pm)
{
	int i;
	for (i = 0; i < N; i++)
	{
		*pc += s[i].chi;                       //定义函数
		*pe += s[i].Eng;
		*pm += s[i].math;


	}
}
int main(void)
{
	struct stu s[N];                                    //声明结构体变量
	int i;
	char n[20];
	double sumC=0, sumE=0, sumM=0;

	for (i = 0; i < N; i++)
	{
		s[i].num = 03161731 + i;
		gets(n);
		strcpy(s[i].name, n);
		scanf("%d%d%d", &s[i].chi, &s[i].Eng, &s[i].math);

	}
	sumscore(s, &sumC, &sumE, &sumM);                     //声明求和函数，传首元素地址
	printf("chi:%lf", sumC / N);
	printf("Eng:%lf", sumE / N);
	printf("math:%lf", sumM / N);
	return 0;


}



11:求总成绩的最大值的那个学生

#include <stdio.h>
#include<string.h>
#define  N 3
struct stu 
{
	int num;
	char name;
	int chi;
	int Eng;
	int math;
};

struct stu * fmax(struct str  *s[])          //求总成绩的最大值，返回指向最大值结构体数组元素的地址
{
	struct stu * p, * pm;
	int x, max;
	pm = &s;
	max = pm->math + pm->chi + pm->Eng;
	for (p = s + 1; p < s + N; p++)
	{
		x = p->math + p->chi + p->Eng;
		if (x > max) 
		{
			max = x;
			pm = p;
		}
		return pm;


	}
}
int main(void)
{
	struct stu s[N];
	int i;
	char n[20];
	struct stu * pmax;

	for (i = 0; i < N; i++)
	{
		s[i].num = 03161731+i;
		gets(n);
		strcpy(s[i].name, n);
		scanf("%d%d%d", &s[i].chi, &s[i].Eng, &s[i].math);
	}
	pmax=fmax(s);
	printf("%c", pmax->name);                             //输出总成绩最大值的学生姓名

	return 0;


}



12：按照数学成绩的由高到低进行排序（降序）

void sortmath (struct stu s[])
{
	int i, j;
	struct stu t;
	for (i = 0; i < N - 1; i++)               
	{
		for (j = i+ 1; j < N; j++)
		{
			if (s[i].math < s[j].math)
			{
				t = s[i];
				s[i] = s[j];
				s[j] = t;                 //按照大小交换两给人的信息
			}
		}
	} 
}
int main(void)
{
	struct stu s[N];
	int i;
	char n[20];
	sortmath (s);
	for (i = 0; i < N; i++)
	printf("%s\n", s[i].name);
	return 0;


}



13：顺序表的删除
#include <stdio.h>

int del(int key, int  a[])
{
	int i, j;
	for (i = j = 0; i < 5; i++)                //想象出一个数组，重新放值
	{
		if (a[i] - key)
			a[j++] = a[i];
	}
	return j;
}
int main(void)
{
	int j, p;
	int a[5] = { 2,23,2,54,5 };
	int key ;
	printf("please input key");
	scanf("%d", &key);
	p=del(key, a);
	for(j=0;j<p;j++)
	printf("%d\n", a[j]);
}



14：求最大公约数和最小公倍数 （s=(x*y)/k）
#include <stdio.h>
int main(void)
{
	int x, y, k;
	printf("please input two data:  ");
	scanf("%d%d",&x, &y);
	k = x < y ? x: y;
	for (; k > 0; k--)                         //	for (k = x < y ? x : y; k > 1 && (x%k || y % k); k--);  升级版（空循环）
		if (x%k == 0 && y%k == 0)
			break;
	printf("%d", k);
}





15：约瑟夫环s找出并按顺序输出



ElemSN * TosephusRing(ElemSN * t, int s)                //（在单向循环链表传尾指针比头指针更加高效）
{
	ElemSN * h1 = NULL, *t1=NULL,*h;
	while (t - t->next)                             //最后一个结点跳出循环
	{
		for (int i = 0; i < s - 1; i++)
			t = t->next;
		    	h = t->next;
			t->next = h->next;
			h->next = NULL;
			if (!h1)
				h1 = t = h;
			else
				t1 = t1->next = h;
	}
	if (!h1)                                    //判断是否只有一个结点
		h1 = t;
	else
		t1->next = t;
		t->next = NULL;
		return h1;

}




16：顺序栈的创建，入栈，出栈   （升级版）

#include <stdio.h>
#include <stdlib.h>
#define  MAXSIZE 100              //栈的最大元素
typedef struct stack
{	
	int s[MAXSIZE];               //定义一个顺序栈
	int top;
}SeqStack;

SeqStack * CreatStack()             //创建顺序栈
{
	SeqStack * p;                       //声明指向栈底的指针
	p = (SeqStack *)malloc(sizeof(SeqStack)); 
	p->top = -1;
	return p;
}


int PusStack(SeqStack * p, int x)           //入栈
{
	if (p->top == MAXSIZE - 1)                  //每次判断栈是否满，栈满不能入栈
		printf("stack is full!");
	else
		p->top++;
		p->s[p->top] = x;
}



int PopStack(SeqStack * p,int * q)
{
	if (p->top == -1)
		printf("Stack is empty.");
	else
		*q = p->s[p->top];
		p->top--;
}

 



int main()
{
	int x,q;
	SeqStack * p;
	p=CreatStack();
	printf("Please input data");
	scanf("%d", &x);
	PusStack(p, x);
	PopStack(p,&q);
	printf("%d\n", q);

}




17：文件操作 ，文件的打开与关闭，写入与读取

#include<stdio.h>
#include<stdlib.h>
int main(void)
{   
	FILE * f_pic,* f_file,* f_finish;                              //定义文件指针
	char ch;
	char pic_name[20], file_name[20], finish_name[20];
	printf("please input need continuing piturer and Filname! \n");
	printf("picture: ");
	scanf("%s", pic_name);
	printf("file: ");
	scanf("%s", file_name);
	printf("finish: ");
	scanf("%s", finish_name);
	if (!(f_pic = fopen("F:\pic_name", "rb")))                             //判断文件是否打开成功
	{
		printf("cannot open the picture %s", pic_name);
		return;
	}
	if (!(f_file=fopen("F;\file_name", "rb")))
	{
		printf("cannot open the file %s", file_name);
		return;
	}
	if (!(f_finish = fopen("F:\finish_name", "wb")))
	{
		printf("cannot open the finish %s", finish_name);
		return;
	}

	while (!(feof(f_pic)))                                             //判断二进制文件是否结束
	{
		ch = fgetc(f_pic);                                      //读取字符
		fputc(ch, f_finish);                         //写入字符
	fclose(f_pic);                          //关闭文件

	while (!(feof(f_file)))
	{
		ch = fgetc(f_file);
		fputc(ch, f_finish);
	}
	fclose(f_file);
	fclose(f_finish);
}




18： 递归

1：把整数化为其二进制并且输出？

void Binary(int x)
{
	if (x)
	{
		Binary(x / 2);
		printf("%d",x % 2);
	}
}


int main()
{
	int x;
	printf("Please input the data:");
	scanf("%d", &x);
	Binary(x);
}



2：求整数的阶乘？

int Factorial(int n)
{
	if (n-1)
		return  Factorial(n - 1)*n;
	return 1;

}


int main()
{
	int x, t;
	printf("Please input the data:");
	scanf("%d", &x);
	t = Factorial(x);
	printf("%d", t);
}



19：






