
1：声明一个类，求正方体的面积             
#include<iostream>
using namespace std;
class Rectangle
{
	private:
		int length, width ;
	public:
		Rectangle()                        //定义构造函数，看参数的个数，或者类型而选择调用那个构造函数
		{
			length = 0;
			width = 0;
		}
		Rectangle(int l, int w)
		{
			length = l;
			width = w;
		}
		void Area()
		{
			cout << "area=" << length * width << endl;
		}	

};

int main(void)
{
	Rectangle  Rec(3, 5);
	Rec.Area();                    //通过共有访问私有
}



2：对象的创建与释放的过程

#include<iostream>
using namespace std;
class Myclass
{
private:
	int * p;
public:
	Myclass(int * t)
	{
		p = t;
	}
	void print()
	{
		cout << *p << endl;
	}
	~Myclass()                           //定义析构函数
	{
		delete p;
	}

};

int main()
{
	int * pint = new int(3);
	Myclass * pm = new Myclass(pint);
	pm->print;
	delete pm;
	return 0;


	//Myclass *pm = new Myclass(new int(3));
	 pm->print;
	 delete pm;                                          //系统自动调用析构函数，完成释放

}

3：继承的就近原则和赋值兼容原则

#include "stdafx.h"
#include<iostream>
using namespace std;
class Base                               //定义基类
{
public:
	void fun()
	{
		cout << "Base.fun" << endl;                     //用函数来表示执行了那个累的函数
	}
	void hun()
	{
		cout << "Base.hun" << endl;
	}
};

class Derived:public Base                                     //定义派生类，共有继承权限
{
public:
	void fun()
	{
		cout << "Drived.fun" << endl;
	}
	void gun()
	{
		cout << "Driced,gun" << endl;
	}
};




int main()
{    //定义基类对象
	Base objBase;
	objBase.fun();
	objBase.hun();
	

	Base * pb=&objBase;
	pb->fun();
	pb->hun();             //Base::hun()
	



	//定定义派生类对象
	Derived objD;
	objD.fun();                          //Drived.fun(),就近原则优先生效
	objD.hun();
	objD.gun();
	objD.Base::fun();                 //Base::fun()



	//用派生类指针操作对象
	Derived  * pd = &objD;
	pd->fun();
	pd->hun();
	pd->gun();
	pd->Base::fun();


	//基类指针指向派生类对象，只可调用派生类从基类继承的成员
	Derived ohjD;
	Base * pd = &objD;            //赋值兼容原则
	pd->fun();     //Base::fun()
	pd->hun();    //Base::hun()

}

4：综合继承知识点

#include<iostream>
using namespace std;
class Base                              
{
private:
	int x, y;

public:
	Base():x(0), y(0)
	{
		cout << "Base cons" << endl;
	}
	Base(int x,int y)
	{
		this->x = x;
		this->y = y;
		cout << "Base cons" << endl;
	}
	~Base()
	{
		cout << "Base Des" << endl;
	}
	void print()
	{
		cout << "x="<< x << endl;  
		cout << "y="<< y << endl;
	}
};

class Derived:public Base                                    
{
private:
	int z;

public:
	Derived()
	{
		z = 0;
		cout << "Derived cons" << endl;
	}
	Derived(int i) :Base(i - 1, i + 1) 
	{
		z = i;
		cout << "Derived cons" << endl;
	}
	~Derived()
	{
		cout << "Derived Des"<<endl;
	}
	void print()
	{
		Base::print();
		cout << "z="<<z << endl;
	}
};

int main()
{  
	//用派生类指针操作对象
	Derived  * pd = new Derived(3);
	pd->print();
	pd->Base::print();
	delete pd;


}




5：受保护的权限数据，在派生类中初始化


#include<iostream>
using namespace std;
class Base                              
{
protected:
	int x, y;
};

class Derived :public Base
{
private:
	int z;

public:
	Derived()
	{
		x = 0;
		y = 0;
		z = 0;
		cout << "Derived cons" << endl;
	}
	Derived(int i)
	{
		x = i + 2;
		y = i - 1;
		z = i;
		cout << "Derived cons" << endl;
	}
	~Derived()
	{
		cout << "Derived Des" << endl;
	}
	void print();

};

void Derived ::print()               //类内成员函数也可在类内声明，类外实现
{
	cout << "x=" << x << endl;
	cout << "y=" << y << endl;
	cout << "z=" << z << endl;
}



int main()
{  
	//用派生类指针操作对象
	Derived  * pd = new Derived(3);
	pd->print（）;
	delete pd;
}



6：多态性的动态联编


#include<iostream>
using namespace std;

class Base
{
public:
	virtual void fun() = 0;                 //纯虚函数，提供接口
};

class D1 :public Base
{
public:
	void fun()
	{
		cout << "D1 fun()" << endl;
	}
};

class D2: public Base
{
public:
	void fun()
	{
		cout << "D2 fun()" << endl;
	}
};

class Myclass                       //实现二次封装
{
private:
	Base * p;
public:
	Myclass(Base * t)            //使基类指针指向了派生类对象
	{
		p = t;
	}
	void dofun()
	{
		p->fun();
	}
};

int main(void)
{
	D2 * d2 = new D2();
	Myclass * pm = new Myclass(d2);
	pm->dofun();
}



7：








